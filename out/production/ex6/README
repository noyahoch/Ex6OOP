noyahoch
omrii99


Design:
    The program divides into three main packages:

    Main package - which is responsible for parsing the code and deciding whether it is legal.
    Sjavac.java - responsible for parsing the code and making basic syntactical checks.
    CodeReader.java - get an arraylist<String> that represents the code. It goes through the the code,
    and creates the relevant command objects.After making them, their validity is checked.
    Exceptions - see next part.

    Block package - includes the Block.java class which is abstract, and the inheriting classes -
    conditional, method, and global. All of which have checkValidity method that checks the validity of the Block.

    Variable package - includes the variable class, and VariableFactory, which is responsible of creating
    a variable according to its finality, type, and assignment String. It checks the validity after assignment.


Error Handling:
    We chose to handle errors using exception mechanism, in order to be able to differ the syntactical
    errors (i.e. not closing a block) from the logical one (i.e invalid assignment).
    This allows us to give informative and helpful messages in case the code is invalid.


OOP design:
    Other options we considered is creating additional factories for the blocks.
    We ruled out this option because each factory should include information about the specific code
    (i.e current block, global variables and methods).
    We thought that such model wouldn't be modular, very hard to extend, and will not follow the
    encapsulation principle.

    In order to add a new variable type, we have add the relevant type parameter to the enum in variable.
    Making it easily extensible.

    Class - in order to enable such feature, we would make an additional Class class that will inherit
    Block. We would create a new method in CodeReader that will recognize a class declaration and create
    a new class according to it, and finally will check its validity.


    Different method types - will lead to some changes in the Method class (adding type) and modifying the
    checkValidity method. In CodeReader we would modify a command that recognizes the method declaration,
    and creates it, and the method that checks the return statement to have a valid type.


Regex:
    1. Boolean value regex  -"true|false|"+DOUBLE_PATTERN; it could hold "true", "false", or any valid
    double pattern (-?, digits, .?, digits).
    2.METHOD_DEC = "(void\\s)\\s*" + Method.VALID_METHOD_NAME +	"\\s*\\(([\\w\\s,]*)\\)\\s*\\{\\s*";
    a method declaration hold the void keyword, then a valid method name, parenthesis, and
